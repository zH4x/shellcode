; Listing generated by Microsoft (R) Optimizing Compiler Version 19.15.26726.0 

	TTL	C:\hub\shellcode\os\linux\arm64\crypto\ascon\ascon.c
	ARM64

	AREA	|.drectve|, DRECTVE
	DCB	"-defaultlib:LIBCMT "
	DCB	"-defaultlib:OLDNAMES "

	EXPORT	|ascon|
; Function compile flags: /Ogspy
; File c:\hub\shellcode\os\linux\arm64\crypto\ascon\ascon.c

	AREA	|.text$mn|, CODE, ARM64

|ascon|	PROC

; 6    :     int      i;
; 7    :     W x0, x1, x2, x3, x4;
; 8    :     W t0, t1, t2, t3, t4, *s=(W*)p;
; 9    :     
; 10   :     // load 320-bit state
; 11   :     x0 = s[0]; x1 = s[1];

	ldp         x11,x5,[x0]
	mov         x3,#0

; 12   :     x2 = s[2]; x3 = s[3];

	ldp         x12,x4,[x0,#0x10]
	mov         x2,#0

; 13   :     x4 = s[4];

	ldr         x8,[x0,#0x20]
	mov         w1,#0xC
|$LL8@ascon|

; 14   : 
; 15   :     for (i=0; i<12; i++) {
; 16   :       // addition of round constant
; 17   :       x2 ^= ((0xfull - i) << 4) | i;
; 18   : 
; 19   :       // substitution layer
; 20   :       x0 ^= x4;    x4 ^= x3;    x2 ^= x1;

	eor         x15,x8,x11
	eor         x7,x8,x4
	mov         x9,#0xF0
	sub         x8,x9,x2
	orr         x9,x8,x3
	eor         x10,x9,x12
	eor         x11,x10,x5

; 21   :       t0  = x0;    t1  = x1;    t2  = x2;    t3  =  x3;    t4  = x4;
; 22   :       t0  = ~t0;   t1  = ~t1;   t2  = ~t2;   t3  = ~t3;    t4  = ~t4;

	mvn         x8,x15

; 23   :       t0 &= x1;    t1 &= x2;    t2 &= x3;    t3 &=  x4;    t4 &= x0;

	and         x13,x8,x5
	mvn         x9,x11
	and         x12,x9,x4
	mvn         x8,x7
	mvn         x9,x5
	and         x14,x8,x15
	and         x8,x9,x11

; 24   :       x0 ^= t1;    x1 ^= t2;    x2 ^= t3;    x3 ^=  t4;    x4 ^= t0;

	eor         x10,x8,x15
	mvn         x9,x4
	and         x8,x9,x7
	eor         x11,x8,x11

; 25   :       x1 ^= x0;    x0 ^= x4;    x3 ^= x2;    x2  = ~x2;

	eor         x8,x12,x5
	eor         x6,x13,x7
	eor         x13,x8,x10
	eor         x8,x14,x4
	eor         x10,x6,x10
	eor         x15,x8,x11

; 26   : 
; 27   :       // linear diffusion layer
; 28   :       x0 ^= R(x0, 19) ^ R(x0, 28);

	ror         x8,x10,#0x13
	eor         x9,x8,x10,ror #0x1C
	mvn         x12,x11

; 29   :       x1 ^= R(x1, 61) ^ R(x1, 39);

	ror         x8,x13,#0x3D
	eor         x11,x9,x10
	eor         x9,x8,x13,ror #0x27

; 30   :       x2 ^= R(x2,  1) ^ R(x2,  6);

	ror         x8,x12,#1
	eor         x5,x9,x13
	eor         x9,x8,x12,ror #6

; 31   :       x3 ^= R(x3, 10) ^ R(x3, 17);

	ror         x8,x15,#0xA
	eor         x12,x9,x12
	eor         x9,x8,x15,ror #0x11

; 32   :       x4 ^= R(x4,  7) ^ R(x4, 41);

	ror         x8,x6,#7
	eor         x4,x9,x15
	eor         x9,x8,x6,ror #0x29
	add         x3,x3,#1
	eor         x8,x9,x6
	add         x2,x2,#0x10
	sub         w1,w1,#1
	cbnz        w1,|$LL8@ascon|

; 33   : 
; 34   :     }
; 35   :     // save 320-bit state
; 36   :     s[0] = x0; s[1] = x1;

	stp         x11,x5,[x0]

; 37   :     s[2] = x2; s[3] = x3;

	stp         x12,x4,[x0,#0x10]

; 38   :     s[4] = x4;

	str         x8,[x0,#0x20]
	ret

	ENDP  ; |ascon|

	END
